package iot.unipi.it;

import java.util.ArrayList;

import org.eclipse.californium.core.CoapClient;
import org.eclipse.californium.core.CoapHandler;
import org.eclipse.californium.core.CoapObserveRelation;
import org.eclipse.californium.core.CoapResponse;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.ParseException;

public class CoapObserverClient extends CoapClient {
	private Thermometer t;
	
	CoapObserveRelation coapObserveRelation;

	public CoapObserverClient(Thermometer t) {
		super(t.getResourceURI());
		this.t = t;
	}

	public void startObserving() {
		coapObserveRelation = this.observe(new CoapHandler () {
			public void onLoad(CoapResponse response) {
				try {
					String value;
					JSONObject jo = (JSONObject) JSONValue.parseWithException(response.getResponseText());
					
					if (jo.containsKey("temperature")) {
						value = jo.get("temperature").toString();
						Integer numericValue = Integer.parseInt(value.trim());
						int lower = 36;
						int upper = 39;
						if (numericValue < lower || numericValue > upper) {
							int index = MainApp.thermometers.indexOf(t);
                            Alarm a = MainApp.alarms.get(index);
                            if (!a.getState()) {
                            	MainApp.triggerAlarm("ON", a);
                            }
						}
					} else {
						System.out.println("Temperature value not found.");
						return;
					}
	
					ArrayList<String> resourceValues = t.getTemperatureValues();
                    resourceValues.add(value);
                    MainApp.thermometers.get(MainApp.thermometers.indexOf(t))
                                    .setTemperatureValues(resourceValues);

	
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
	
			public void onError() {
				System.out.println("Error in observing.");
			}
		});
	};
}
