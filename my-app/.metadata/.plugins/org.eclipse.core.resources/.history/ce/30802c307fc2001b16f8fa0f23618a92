package iot.unipi.it;

import java.sql.SQLException;

import org.eclipse.californium.core.coap.Request;
import org.eclipse.californium.core.coap.CoAP.Code;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

public class CollectorMqttClient implements MqttCallback{
	
	private String broker = "tcp://127.0.0.1";
	private String clientId = "JavaApp";
	private String subTopic = "temperature";
	private String pubTopic = "alarm";
	private MqttClient mqttClient = null;
	
	public CollectorMqttClient() throws MqttException {
		this.mqttClient = new MqttClient(this.broker,this.clientId);
		mqttClient.setCallback( this );
		mqttClient.connect();
		mqttClient.subscribe(this.subTopic);
	}
	
	public void publish(String content) throws MqttException{
		try {
			//mqttClient.connect();
			MqttMessage message = new MqttMessage(content.getBytes());
			mqttClient.publish(this.pubTopic, message);
			//mqttClient.disconnect();
		} catch(MqttException me) {
			me.printStackTrace();
		}
	}
	
	public void connectionLost(Throwable cause) {
		cause.printStackTrace();
		// TODO Auto-generated method stub
		System.out.println("Connection is broken");
		
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		String payload = message.getPayload().toString();
		System.out.println(String.format("[%s] %s", topic, payload);
		
		JSONObject sensorMessage = (JSONObject) JSONValue.parseWithException(payload);
		if (sensorMessage.containsKey("temperature")) {
			int timestamp = Integer.parseInt(sensorMessage.get("timestamp").toString());
			Integer numericValue = Integer.parseInt(sensorMessage.get("temperature").toString());
			int lower = 36;
			int upper = 39;
			if (numericValue < lower || numericValue > upper) {
                if (!a.getState()) {
            		a.setState(true);
            		System.out.println("Dangerous");
            		System.out.println(a.getResourceURI()+"?color=r");
            		String payload = "mode=on";
            		Request req = new Request(Code.POST);
            		req.setConfirmable(true);
            		req.setPayload(payload);
            		req.setURI(a.getResourceURI()+"?color=r");
            		System.out.println(req);
            		req.send();
                }
                else {
                	System.out.println("Still dangerous");
                }
			}
			else {
				if (a.getState()) {
					a.setState(false);
            		String payload = "mode=off";
            		Request req = new Request(Code.POST);
            		req.setConfirmable(true);
            		req.setPayload(payload);
            		req.setURI(a.getResourceURI()+"?color=r");
            		System.out.println(req);
            		req.send();
					System.out.println("Safe");
				}
				else {
					System.out.println("Still safe");
				}
			}
			System.out.println("Writing to DB: " + ("Node: "+t.getResourceURI()+
					"\ttime: "+timestamp+
					"\tvalue: "+numericValue+
					" celsius\talarm on? "+a.getState()));
			
			try {
				Collector.db.addReading(t.getResourceURI(), timestamp, numericValue, a.getState());
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		
	}

	public void deliveryComplete(IMqttDeliveryToken token) {
		// TODO Auto-generated method stub
		System.out.println("Delievery Complete");
		
	}

}
